import streamlit as st
from PIL import Image
import torch
import torchvision.transforms as transforms
import torchvision.models as models
import urllib.request

# üß† Mapping simple ImageNet ‚Üí Cat√©gorie d√©chet
recycling_map = {
    "plastic": ("Plastique", "Oui", "Poubelle Jaune"),
    "bottle": ("Verre", "Oui", "Poubelle Verte"),
    "can": ("M√©tal", "Oui", "Poubelle Jaune"),
    "paper": ("Papier", "Oui", "Poubelle Bleue"),
    "banana": ("Organique", "Non", "Compost / Ordures"),
    "food": ("D√©chet Alimentaire", "Non", "Compost / Ordures"),
    "cup": ("Plastique", "Oui", "Poubelle Jaune"),
    "box": ("Carton", "Oui", "Poubelle Jaune"),
    "bag": ("Plastique", "Oui", "Poubelle Jaune"),
}

# Titre
st.title("‚ôªÔ∏è Classificateur de d√©chets IA")

# Chargement mod√®le
@st.cache_resource
def load_model():
    model = models.resnet50(pretrained=True)
    model.eval()
    return model

model = load_model()

# Labels ImageNet
@st.cache_data
def load_labels():
    url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
    urllib.request.urlretrieve(url, "imagenet_classes.txt")
    with open("imagenet_classes.txt") as f:
        return [line.strip() for line in f.readlines()]

labels = load_labels()

# Pr√©traitement image
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]
    )
])

# Upload
uploaded_file = st.file_uploader("Charge une image de d√©chet", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Image t√©l√©vers√©e", use_column_width=True)

    # Pr√©traitement
    input_tensor = transform(image).unsqueeze(0)

    with torch.no_grad():
        output = model(input_tensor)
        probabilities = torch.nn.functional.softmax(output[0], dim=0)
        top5_prob, top5_catid = torch.topk(probabilities, 5)

    st.subheader("üß† R√©sultats de l‚Äôanalyse IA :")
    found = False
    for i in range(top5_prob.size(0)):
        label = labels[top5_catid[i]]
        st.write(f"- {label} ({top5_prob[i].item()*100:.2f}%)")
        for keyword in recycling_map:
            if keyword in label.lower():
                type_dechet, recyclable, poubelle = recycling_map[keyword]
                st.success(f"‚úÖ C'est un d√©chet de type **{type_dechet}**")
                st.info(f"‚ôªÔ∏è Recyclable ? **{recyclable}**")
                st.warning(f"üóëÔ∏è √Ä jeter dans : **{poubelle}**")
                found = True
                break
        if found:
            break
    if not found:
        st.error("‚ö†Ô∏è Ce type de d√©chet n‚Äôa pas pu √™tre reconnu comme recyclable.")
